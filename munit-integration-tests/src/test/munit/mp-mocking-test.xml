<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">


    <spring:beans>
        <spring:import resource="mule-config.xml"/>
    </spring:beans>

    <munit:config/>
    <mock:config name="mock"/>

    <script:script name="mockPayload" engine="groovy"><![CDATA[
			return new String("anotherString");
		]]>
    </script:script>

    <script:script name="mockJdbcOutbound" engine="groovy"><![CDATA[
            List resultOfJdbc = new ArrayList();
            Map r = new HashMap();
            r.put('jobtitle', "someGroup");
            resultOfJdbc.add(r);
			return resultOfJdbc;
		]]>
    </script:script>

    <custom-transformer class="org.mule.transformers.AddPropertyTransformer" name="propertyTransformer"/>

    <munit:test name="testMockMp" description="
     We are testing here that the Message processor can be mocked with an expected value to return.">


        <mock:when messageProcessor="echo-component">
            <mock:then-return payload-ref="#[string:expectedPayload]"/>
        </mock:when>

        <munit:set payload-ref="#[string:anotherString]"/>

        <flow-ref name="echoFlow"/>

        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
    </munit:test>

    <munit:test name="testMockWithoutChangingPayload"
                description="The payload must not change when to return is not defined">

        <mock:when messageProcessor="jira:create-group"/>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="callingJira"/>

        <munit:assert-that payloadIs-ref="#[string: Hello world!]"/>

    </munit:test>

    <munit:test name="testMessageProcessorMockingWithTransformer"
                description="Apply transformer to message processor">

        <mock:when messageProcessor="jira:create-group" thenApplyTransformer-ref="propertyTransformer"/>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="callingJira"/>

       <munit:assert-on-equals value-ref="#[flowVars['newProperty']]" expected-ref="#[string:propertyValue]"/>

    </munit:test>

    <munit:test name="testMpIsNotMocked" description="
    If the Message Processor is not mocked then do not change its behavior">

        <munit:set payload-ref="#[string:expectedPayload]"/>

        <flow-ref name="echoFlow"/>

        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
    </munit:test>

    <munit:test name="testMpWithParameters" description="
    If the Message Processor is not mocked then do not change its behavior">

        <mock:when messageProcessor="jira:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="groupName" whereValue-ref="#[string:someGroupName]"/>
                <mock:with-attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:expectedPayload]"/>
        </mock:when>

        <munit:set payload-ref="#[string:anotherString]"/>

        <flow-ref name="callingJira"/>

        <mock:verify-call messageProcessor="jira:create-group" atLeast="1">
            <mock:attributes>
                <mock:attribute name="groupName" whereValue-ref="#[string:someGroupName]"/>
                <mock:attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="jira:create-group" times="1"/>
        <mock:verify-call messageProcessor="jira:create-group" atMost="1"/>
        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
    </munit:test>


    <munit:test name="testMpWithParametersAndSpy" description="
    If the Message Processor is not mocked then do not change its behavior">

        <mock:when messageProcessor="jira:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="groupName" whereValue-ref="#[string:someGroupName]"/>
                <mock:with-attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:expectedPayload]">
                <mock:inbound-properties>
                    <mock:inbound-property/>
                </mock:inbound-properties>
            </mock:then-return>
        </mock:when>

        <mock:spy messageProcessor="jira:create-group">

            <mock:assertions-before-call>
                <munit:assert-not-null/>
                <munit:assert-that payloadIs-ref='#[resultOfScript("mockPayload")]'/>
                <set-variable variableName="beforeCallKey" value="#[string:beforeCallValue]"/>

            </mock:assertions-before-call>

            <mock:assertions-after-call>
                <munit:assert-not-null/>
                <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
                <set-variable variableName="afterCallKey" value="#[string:afterCallValue]"/>

            </mock:assertions-after-call>
        </mock:spy>

        <munit:set payload-ref="#[string:anotherString]"/>

        <flow-ref name="callingJira"/>

        <mock:verify-call messageProcessor="jira:create-group" atLeast="1">
            <mock:attributes>
                <mock:attribute name="groupName" whereValue-ref="#[string:someGroupName]"/>
                <mock:attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="jira:create-group" times="1"/>
        <mock:verify-call messageProcessor="jira:create-group" atMost="1"/>
        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
        <munit:assert-on-equals expected-ref="#[string:beforeCallValue]" value-ref="#[beforeCallKey]"/>
        <munit:assert-on-equals expected-ref="#[string:afterCallValue]" value-ref="#[afterCallKey]"/>
    </munit:test>


    <munit:test name="testMpWithParametersAndSpyWithFail" description="
    If the Message Processor is not mocked then do not change its behavior">

        <mock:when messageProcessor="jira:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="groupName" whereValue-ref="#[string:someGroupName]"/>
                <mock:with-attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:expectedPayload]">
                <mock:inbound-properties>
                    <mock:inbound-property/>
                </mock:inbound-properties>
            </mock:then-return>
        </mock:when>

        <mock:spy messageProcessor="jira:create-group">

            <mock:with-attributes>
                <mock:with-attribute name="groupName" whereValue-ref="#[string:notAGroupName]"/>
                <mock:with-attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:with-attributes>

            <mock:assertions-before-call>
                <munit:assert-not-null/>
                <munit:assert-that payloadIs-ref='#[resultOfScript("mockPayload")]'/>
                <set-variable variableName="beforeCallKey" value="#[string:beforeCallValue]"/>

            </mock:assertions-before-call>

            <mock:assertions-after-call>
                <munit:assert-not-null/>
                <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
                <set-variable variableName="afterCallKey" value="#[string:afterCallValue]"/>

            </mock:assertions-after-call>
        </mock:spy>

        <munit:set payload-ref="#[string:anotherString]"/>

        <flow-ref name="callingJira"/>

        <mock:verify-call messageProcessor="jira:create-group" atLeast="1">
            <mock:attributes>
                <mock:attribute name="groupName" whereValue-ref="#[string:someGroupName]"/>
                <mock:attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:attributes>
        </mock:verify-call>

        <mock:verify-call messageProcessor="jira:create-group" times="1"/>
        <mock:verify-call messageProcessor="jira:create-group" atMost="1"/>
        <munit:assert-that payloadIs-ref="#[string:expectedPayload]"/>
        <munit:assert-on-equals expected-ref="#[null]" value-ref="#[flowVars['beforeCallKey']]"/>
        <munit:assert-on-equals expected-ref="#[null]" value-ref="#[flowVars['afterCallKey']]"/>
    </munit:test>


    <munit:test name="testMpWithSpyWithAttributes" description="Test that Spy filters MP's based on attributes">

        <munit:set payload-ref="#[string:value]"/>

        <mock:spy messageProcessor="set-variable">
        	<mock:with-attributes>
        		<mock:with-attribute name="variableName" whereValue-ref="#['myvar1']"/>
        	</mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals value-ref="#[flowVars['myvar1']]" expected-ref="#[null]"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-on-equals expected-ref="#[string:value]" value-ref="#[flowVars['myvar1']]"/>
            </mock:assertions-after-call>
        </mock:spy>

        <mock:spy messageProcessor="set-variable">
        	<mock:with-attributes>
        		<mock:with-attribute name="variableName" whereValue-ref="#['myvar2']"/>
        	</mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals value-ref="#[flowVars['myvar2']]" expected-ref="#[null]"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-on-equals expected-ref="#[string:valuevalue]" value-ref="#[flowVars['myvar2']]"/>
            </mock:assertions-after-call>
        </mock:spy>

        <flow-ref name="duplicateMessageProcessors"/>

    </munit:test>

    <munit:test name="demo_test" description="This is the demo test">

        <mock:outbound-endpoint address="jdbc://lookupJob" returnPayload-ref='#[resultOfScript("mockJdbcOutbound")]'/>

        <mock:when messageProcessor="jira:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="groupName" whereValue-ref="#[anyString()]"/>
                <mock:with-attribute name="userName" whereValue-ref='#[anyString()]'/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:createGroupResult]"/>
        </mock:when>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="main"/>

        <munit:assert-not-null/>
        <munit:assert-on-equals expected-ref="#[string:someGroup]" value-ref="#[variable:job]"/>
        <munit:assert-that payloadIs-ref="#[string:createGroupResult]"/>
    </munit:test>

    <munit:test name="mockingEndpointWithTransformer" description="mockingEndpointWithTransformer">

        <mock:outbound-endpoint address="http://localhost:10443/test" thenApplyTransformer-ref="propertyTransformer"/>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="outboundEndPointFlow"/>

        <munit:assert-on-equals value-ref="#[flowVars['newProperty']]" expected-ref="#[string:propertyValue]"/>

    </munit:test>

    <munit:test name="testingMockTrowsException" description="Test if a mock can throw an exception"
                expectExceptionThatSatisfies="java.lang.Exception">
        <mock:throw-an exception-ref='#[new java.lang.Exception()]' whenCalling="jira:create-group"/>

        <flow-ref name="callingJira"/>
    </munit:test>

    <munit:test name="spy_test" description="This test checks if spy is working properly">
        <mock:spy messageProcessor="set-variable">
            <mock:assertions-before-call>
                <munit:assert-not-null/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-not-null/>
                <munit:assert-on-equals value-ref="#[flowVars['myvar']]" expected-ref="#[string:Hello world!]"/>
            </mock:assertions-after-call>
        </mock:spy>
        <munit:set payload-ref="#[string:Hello world!]"/>
        <flow-ref name="setVariable"/>
    </munit:test>

    <munit:test name="mockingFlowsTest" description="This test shows how to mock a flow">
        <mock:when messageProcessor="flow">
            <mock:with-attributes>
                <mock:with-attribute name="name" whereValue-ref="callingJira"/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:The Flow is mocked]"/>
        </mock:when>

        <munit:set payload-ref="#[string:Hello world!]"/>

        <flow-ref name="callingFlow"/>

        <munit:assert-that payloadIs-ref="#[string:The Flow is mocked]"/>

    </munit:test>


    <munit:test name="mockingByDocName" description="This test shows how to mock with a doc name">
        <mock:when messageProcessor="jira:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue-ref="#[string:jiraMp]"/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:createGroupResult]"/>
        </mock:when>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="callingJira"/>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref="#[string:createGroupResult]"/>

    </munit:test>

    <munit:test name="mockingByRegex" description="This test shows how to mock with a Regex">
        <mock:when messageProcessor=".*:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue-ref="#[string:jiraMp]"/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:createGroupResult]"/>
        </mock:when>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="callingJira"/>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref="#[string:createGroupResult]"/>

    </munit:test>

    <munit:test name="mockingByRegexAndMatcher" description="This test shows how to mock with a Regex">
        <mock:when messageProcessor=".*:create-group">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue-ref="#[matchRegex('.*jira.*')]"/>
            </mock:with-attributes>
            <mock:then-return payload-ref="#[string:createGroupResult]"/>
        </mock:when>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="callingJira"/>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref="#[string:createGroupResult]"/>

    </munit:test>

</mule>