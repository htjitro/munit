<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
	  xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xsi:schemaLocation="
	  	http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">


    <munit:config/>
    <mock:config name="Mock_config"/>

    <spring:beans>
        <spring:import resource="mule-config.xml"/>

        <spring:bean class="org.mule.assertions.CustomAssertion" name="customAssertion"/>
    </spring:beans>

    <script:script name="binaryPayload" engine="groovy">
    	<![CDATA[
			String s = "hello";    
			return s.getBytes();
		]]>
    </script:script>	

    <munit:test name="testingEchoFlow"
                description="
        We want to test that the flow always returns the same payload as we had before calling it.">

        <set-payload value="#[string:fefe]"/>

        <munit:set payload-ref="#[string: Hello world!]"/>

        <flow-ref name="echoFlow"/>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref="#[string: Hello world!]"/>
    </munit:test>

    <sub-flow name="doFalseAssertion">
        <munit:assert-false condition="#[1==2]"/>
    </sub-flow>

    <munit:test name="testingEchoWithANullPayload"
                description="
        Echo returns always the same as we have before it, so we need to get a Null Payload after it.">

        <munit:set-null-payload/>

        <flow-ref name="echoFlow"/>

        <munit:assert-null/>
    </munit:test>


    <munit:test name="testThatTwoThingsAreEqual"
                description="
        Testing that two things are equal">

        <munit:assert-on-equals expected-ref="#[string: Hello world!]" value-ref="#[string: Hello world!]"/>
    </munit:test>


    <munit:test name="testThatTwoThingsAreNotTheSame"
                description="
        Testing that two things are not equal">

        <munit:assert-not-same expected-ref="#[string: Hello world!]" value-ref="#[string: Hello world2!]"/>
    </munit:test>


    <munit:test name="testThatSomethingIsFalse"
                description="
        Testing that something is false">

        <flow-ref name="doFalseAssertion"/>
    </munit:test>

    <munit:test name="testThatSomethingIsTrue"
                description="
        Testing that something is true">

        <munit:assert-true condition="#[1==1]"/>
    </munit:test>

    <munit:test name="testThatATestIsIgnored"
                description="
        Testing that a test is ignored" ignore="true">

        <munit:fail/>
    </munit:test>


    <munit:test name="testingGetResourceFunctionAsString"
                description="We want to validate that the payload is the same as the file picked">

        <munit:set payload-ref='#[getResource("testFile.txt").asString()]'/>

        <munit:assert-not-null/>
        <munit:assert-that payloadIs-ref="#[string:Hello World!]"/>
    </munit:test>


    <!-- this test is ignore due to a bug in mel evaluator MULE-8593-->
    <munit:test ignore="true" name="testingGetResourceFunctionUsingJava"
                description="We want to validate that the payload is the same as the file picked">

        <munit:set payload-ref="#[payload.getClass().getClassLoader().getResourceAsStream('testFile.txt')]"/>

        <munit:assert-not-null/>
    </munit:test>


    <munit:test name="testExceptions" description="Test Exceptions"
                expectExceptionThatSatisfies="org.mule.api.transformer.TransformerException">
        <flow-ref name="exceptionFlow"/>
    </munit:test>

    <munit:test name="testCustomAssertion" description="run and expect a failure in a custom assertion">

        <munit:set payload-ref='#[string:Hello World]'/>

        <munit:run-custom assertion-ref="customAssertion"/>
    </munit:test>


    <munit:test name="testMelFunctions" description="Test Exceptions">
        <munit:set payload-ref="#[string:aString]">
            <munit:invocation-properties>
                <munit:invocation-property key="invocation" value-ref="#[string:invocationValue]"/>
            </munit:invocation-properties>
            <munit:inbound-properties>
                <munit:inbound-property key="inbound" value-ref="#[string:inboundValue]"/>
            </munit:inbound-properties>
            
            <munit:session-properties>
                <munit:session-property key="session" value-ref="#[string:sessionValue]"/>
            </munit:session-properties>

            <munit:outbound-properties>
                <munit:outbound-property key="outbound" value-ref="#[string:outboundValue]"/>
            </munit:outbound-properties>
        </munit:set>

        <munit:assert-true condition="#[valueOf(payload).is(anyString())]"/>
        <munit:assert-true condition="#[messageHasPropertyInAnyScopeCalled('invocation')]"/>
        <munit:assert-true condition="#[messageHasInvocationPropertyCalled('invocation')]"/>
        <munit:assert-true condition="#[messageInvocationProperty('invocation').is(anyString())]"/>

        <munit:assert-true condition="#[messageHasPropertyInAnyScopeCalled('inbound')]"/>
        <munit:assert-true condition="#[messageHasInboundPropertyCalled('inbound')]"/>
        <munit:assert-true condition="#[messageInboundProperty('inbound').is(eq('inboundValue'))]"/>


        <munit:assert-true condition="#[messageHasPropertyInAnyScopeCalled('outbound')]"/>
        <munit:assert-true condition="#[messageHasOutboundPropertyCalled('outbound')]"/>
        <munit:assert-true condition="#[messageOutboundProperty('outbound').is(eq('outboundValue'))]"/>

        <munit:assert-true condition="#[messageHasPropertyInAnyScopeCalled('session')]"/>
        <munit:assert-true condition="#[messageHasSessionPropertyCalled('session')]"/>
        
    </munit:test>

    <munit:test name="testMelFunctionsOnBinaryPayload" description="Test MEL assertions on binary payload">
		<munit:set payload-ref="#[resultOfScript('binaryPayload')]"/>

        <munit:assert-true condition="#[valueOf(payload).is(anyByteArray())]"/>
    </munit:test>

</mule>
